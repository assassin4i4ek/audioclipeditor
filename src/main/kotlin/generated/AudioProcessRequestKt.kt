//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: audio_process_pipeline.proto

@kotlin.jvm.JvmSynthetic
inline fun audioProcessRequest(block: AudioProcessRequestKt.Dsl.() -> Unit): AudioProcessPipeline.AudioProcessRequest =
  AudioProcessRequestKt.Dsl._create(AudioProcessPipeline.AudioProcessRequest.newBuilder()).apply { block() }._build()
object AudioProcessRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: AudioProcessPipeline.AudioProcessRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: AudioProcessPipeline.AudioProcessRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): AudioProcessPipeline.AudioProcessRequest = _builder.build()

    /**
     * <code>int32 sampleRate = 1;</code>
     */
    var sampleRate: kotlin.Int
      @JvmName("getSampleRate")
      get() = _builder.getSampleRate()
      @JvmName("setSampleRate")
      set(value) {
        _builder.setSampleRate(value)
      }
    /**
     * <code>int32 sampleRate = 1;</code>
     */
    fun clearSampleRate() {
      _builder.clearSampleRate()
    }

    /**
     * <pre>
     * float encoded in little endian
     * </pre>
     *
     * <code>bytes audioSamplesChannel1 = 2;</code>
     */
    var audioSamplesChannel1: com.google.protobuf.ByteString
      @JvmName("getAudioSamplesChannel1")
      get() = _builder.getAudioSamplesChannel1()
      @JvmName("setAudioSamplesChannel1")
      set(value) {
        _builder.setAudioSamplesChannel1(value)
      }
    /**
     * <pre>
     * float encoded in little endian
     * </pre>
     *
     * <code>bytes audioSamplesChannel1 = 2;</code>
     */
    fun clearAudioSamplesChannel1() {
      _builder.clearAudioSamplesChannel1()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun AudioProcessPipeline.AudioProcessRequest.copy(block: AudioProcessRequestKt.Dsl.() -> Unit): AudioProcessPipeline.AudioProcessRequest =
  AudioProcessRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
